# TFM: An√°lisis Comparativo de Docking Molecular de ACE2 con Remdesivir

![Docking Visualization](figures/remdesivir_ace2_pose.png)

## üìñ Descripci√≥n del Proyecto

Este repositorio contiene el pipeline bioinform√°tico completo para el **Trabajo de Fin de M√°ster (TFM)** en Bioinform√°tica, titulado **"An√°lisis Comparativo de Docking Molecular entre la Prote√≠na ACE2 y Remdesivir"**. El proyecto eval√∫a la afinidad de uni√≥n e interacciones moleculares del antiviral remdesivir con la enzima convertidora de angiotensina 2 (ACE2), una diana clave en SARS-CoV-2, utilizando **AutoDock Vina** como herramienta principal. Para enriquecer el an√°lisis, se implementa un enfoque de **screening virtual (VS)** validado, que incluye:

- B√∫squeda de ligandos bioactivos (IC50 ‚â§10 ŒºM o <100 nM) en bases de datos como ZINC, DrugBank y ChEMBL, usando **RDKit** fingerprints (Morgan, ECFP, MACCS).
- Generaci√≥n de decoys con **DUDE-Z** para benchmarking.
- Refinamiento cu√°ntico semi-emp√≠rico con **MOPAC** (PM7, MOZYME para complejos).
- Comparaci√≥n de herramientas de docking open-source: **Vina, Smina, GNINA, VINARDO, AutoDock4 (AD4), DOCK6, BOLTZ2**.
- An√°lisis estad√≠stico (ROC-AUC, correlaciones de scores) y visualizaci√≥n en **PyMOL**.

El objetivo es explorar implicaciones terap√©uticas de remdesivir como posible modulador de ACE2, validando la fiabilidad de las herramientas de docking en un contexto de VS. Este pipeline h√≠brido (ligando-based + estructura-based) aporta rigor cient√≠fico, reproducibilidad y potencial para extensiones (e.g., simulaciones de din√°mica molecular). Los resultados incluyen m√©tricas de afinidad (kcal/mol), RMSD, y visualizaciones de interacciones (H-bonds, hidrof√≥bicas), con un enfoque comparativo que eleva el TFM a un est√°ndar publicable.

## üéØ Objetivos

- Evaluar la interacci√≥n molecular ACE2-remdesivir en el sitio de uni√≥n RBD (receptor-binding domain).
- Comparar el desempe√±o de m√∫ltiples herramientas de docking para robustez.
- Validar el pipeline de VS mediante decoys y m√©tricas estad√≠sticas (e.g., enrichment factor >10).
- Proporcionar un flujo reproducible documentado en Markdown y Jupyter Notebooks.

## üöÄ Caracter√≠sticas

- **Pipeline Completo**: Desde b√∫squeda de ligandos hasta an√°lisis comparativo y visualizaci√≥n.
- **Validaci√≥n Robusta**: Uso de decoys y m√©tricas ROC-AUC para evaluar especificidad.
- **Cuantificaci√≥n Cu√°ntica**: Refinamiento con MOPAC para geometr√≠as y cargas precisas.
- **Comparaci√≥n Multi-Herramienta**: Evaluaci√≥n de Vina, Smina, GNINA, etc., con correlaciones de scores.
- **Reproducibilidad**: Entorno Conda, scripts modulares, y documentaci√≥n detallada.
- **Visualizaci√≥n Avanzada**: Poses e interacciones en PyMOL; gr√°ficos de resultados en Matplotlib/Seaborn.

## üìÇ Estructura del Repositorio

```plaintext
tfm_docking_ace2_remdesivir/
‚îú‚îÄ‚îÄ input/                   # Archivos de entrada (ACE2: 6M0J.pdb, remdesivir.smi, config_vina.txt)
‚îú‚îÄ‚îÄ ligands/                 # Ligandos bioactivos (SMILES, PDB; ~10 con IC50 ‚â§10 ŒºM)
‚îú‚îÄ‚îÄ decoys/                  # Decoys generados por DUDE-Z (~50 por ligando)
‚îú‚îÄ‚îÄ mopac/                   # Inputs/outputs de refinamiento QM (e.g., remdesivir.mop, charges.out)
‚îú‚îÄ‚îÄ scripts/                 # Scripts Python para el pipeline
‚îÇ   ‚îú‚îÄ‚îÄ prepare_ligands.py   # B√∫squeda y preparaci√≥n de ligandos con RDKit/OpenBabel
‚îÇ   ‚îú‚îÄ‚îÄ generate_decoys.py   # Generaci√≥n de decoys desde DUDE-Z
‚îÇ   ‚îú‚îÄ‚îÄ refine_mopac.py      # Refinamiento QM con MOPAC (PM7/MOZYME)
‚îÇ   ‚îú‚îÄ‚îÄ run_dockings.py      # Docking comparativo (Vina, Smina, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ analyze_results.py    # An√°lisis estad√≠stico (ROC, RMSD, scores)
‚îÇ   ‚îú‚îÄ‚îÄ prepare_receptor.py   # Preparaci√≥n de ACE2 para docking
‚îÇ   ‚îî‚îÄ‚îÄ prepare_ligand.py     # Conversi√≥n de ligandos a PDBQT
‚îú‚îÄ‚îÄ dockings/                # Resultados por herramienta (/vina, /smina, etc.; poses.pdbqt, logs)
‚îú‚îÄ‚îÄ results/                 # Outputs consolidados (affinity_scores.csv, roc_auc.png)
‚îú‚îÄ‚îÄ figures/                 # Visualizaciones (PyMOL poses, plots Matplotlib)
‚îú‚îÄ‚îÄ docs/                    # Documentaci√≥n (methods.md, tfm_draft.md)
‚îú‚îÄ‚îÄ analysis/                # Notebooks Jupyter (e.g., rdkit_analysis.ipynb)
‚îú‚îÄ‚îÄ environment.yml          # Entorno Conda para reproducibilidad
‚îú‚îÄ‚îÄ requirements.txt         # Dependencias Python
‚îî‚îÄ‚îÄ LICENSE                  # Licencia MIT
```

## üõ† Requisitos

- **Sistema Operativo**: Ubuntu 24.04+ (compatible con 2025) o WSL2 en Windows.
- **Hardware**: CPU multi-core (‚â•8 cores); GPU NVIDIA (recomendado para GNINA/BOLTZ2).
- **Dependencias**:
  - Python (‚â•3.10): RDKit, NumPy, Pandas, Matplotlib, Seaborn, OpenBabel (wrapper).
  - Herramientas de docking: AutoDock Vina (‚â•1.2.7), Smina, GNINA, VINARDO, AutoDock4, DOCK6, BOLTZ2.
  - MGLTools/AutoDockTools (1.5.7).
  - MOPAC (‚â•2023 para MOZYME).
  - PyMOL (open-source ‚â•3.1.6).
  - Open Babel (‚â•3.1.1).
- **Acceso Web**: ZINC, ChEMBL, DrugBank (ligandos); DUDE-Z (decoys).

## üîß Instalaci√≥n

Se recomienda usar **Conda** para un entorno reproducible. Sigue estos pasos en Ubuntu 24.04+:

```bash
# 1. Clonar el repositorio
git clone https://github.com/VladSalazar01/Docking_ACE2_remdesivir_Unir
cd tfm_docking_ace2_remdesivir

# 2. Instalar Miniconda (si no est√° instalado)
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash Miniconda3-latest-Linux-x86_64.sh -b
source ~/.bashrc

# 3. Crear y activar entorno Conda
conda env create -f environment.yml
conda activate tfm_docking

# 4. Instalar AutoDock Vina
wget https://github.com/ccsb-scripps/AutoDock-Vina/releases/download/v1.2.7/vina_1.2.7_linux_x86_64 -O ~/bin/vina
chmod +x ~/bin/vina
export PATH=$PATH:~/bin

# 5. Instalar MGLTools
wget http://mgltools.scripps.edu/downloads/tars/releases/REL1.5.7/mgltools_Linux-x86_64_1.5.7.tar.gz
tar -xvzf mgltools_Linux-x86_64_1.5.7.tar.gz
sudo mv mgltools_Linux-x86_64_1.5.7 /opt/mgltools
echo 'export MGLTOOLS_HOME=/opt/mgltools' >> ~/.bashrc
echo 'export PATH=$PATH:$MGLTOOLS_HOME/bin:/opt/mgltools/MGLToolsPckgs/AutoDockTools/Utilities24' >> ~/.bashrc
source ~/.bashrc

# 6. Instalar PyMOL y Open Babel
pip install pymol-open-source-whl
sudo apt update && sudo apt install -y openbabel

# 7. Herramientas adicionales (Smina, GNINA, etc.)
# Smina: conda install -c conda-forge smina
# GNINA: git clone https://github.com/gnina/gnina.git; cd gnina; mkdir build; cd build; cmake ..; make -j4
# VINARDO, AD4, DOCK6, BOLTZ2: Ver docs/INSTALL_TOOLS.md
```

**Nota**: MOPAC y RDKit est√°n en `environment.yml`. Para Google Colab, usa `notebooks/labodock_colab.ipynb` (limitado para MOPAC/GNINA).

## üöÄ Instrucciones de Uso

Ejecuta el pipeline completo con `bash run_pipeline.sh` o paso a paso:

1. **Preparar receptor** (ACE2, PDB ID: 6M0J):
   ```bash
   python scripts/prepare_receptor.py -r input/ace2.pdb -o input/receptor.pdbqt
   ```

2. **Buscar y preparar ligandos** (remdesivir + ~10 similares):
   ```bash
   python scripts/prepare_ligands.py --query "ACE2 inhibitors IC50 <10uM" --output ligands/
   # Usa RDKit para fingerprints; OpenBabel para SMILES ‚Üí PDB
   ```

3. **Generar decoys** (DUDE-Z):
   ```bash
   # Subir SMILES manualmente a dudez.docking.org; luego:
   python scripts/generate_decoys.py --smiles ligands/remdesivir.smi --decoys_dir decoys/
   ```

4. **Refinar con MOPAC** (geometr√≠as y cargas):
   ```bash
   python scripts/refine_mopac.py --input ligands/*.pdb --method PM7 --mozyme True --output mopac/
   ```

5. **Ejecutar dockings comparativos**:
   ```bash
   python scripts/run_dockings.py --config input/config.txt --tools all --output dockings/
   # Grid box: ~20x20x20 √Ö en sitio RBD; exhaustiveness=8-32
   ```

6. **Analizar resultados**:
   ```bash
   python scripts/analyze_results.py --dockings dockings/ --decoys decoys/ --output results/
   # Genera: affinity_scores.csv, roc_auc.png, RMSD stats
   ```

7. **Visualizar**:
   ```bash
   pymol scripts/visualize.py  # Carga poses e interacciones
   ```

**Output Ejemplo**:
- `results/affinity_scores.csv`: `[Tool, Ligand, Binding_Energy_kcal/mol, RMSD]`
- `figures/roc_auc.png`: Curva ROC para validaci√≥n de VS.

## üìù Metodolog√≠a

El pipeline sigue un flujo bioinform√°tico robusto:

1. **Estructuras**: ACE2 (PDB 6M0J, resoluci√≥n 2.5 √Ö, limpio con PyMOL). Remdesivir y ligandos similares (ChEMBL/ZINC, filtrados por IC50 y Tanimoto >0.7).
2. **Ligandos**: SMILES ‚Üí PDB con OpenBabel; fingerprints RDKit (Morgan/ECFP).
3. **Decoys**: ~50 por ligando desde DUDE-Z (MW/logP matched).
4. **Refinamiento QM**: MOPAC PM7 (geometr√≠as); MOZYME para cargas de complejos.
5. **Docking**: Multi-herramienta (Vina como base); m√©tricas: ŒîG, RMSD <2 √Ö.
6. **An√°lisis**: ROC-AUC (>0.8), correlaciones Pearson de scores (>0.8), visualizaci√≥n de H-bonds/hidrof√≥bicas en PyMOL.

**Contribuciones al TFM**:
- Comparaci√≥n multi-herramienta para robustez.
- Validaci√≥n estad√≠stica de VS.
- An√°lisis cu√°ntico para precisi√≥n electrost√°tica.
- Documentaci√≥n reproducible para publicaci√≥n acad√©mica.

## üìä Resultados Esperados

- **Afinidad de Remdesivir**: ŒîG ~-7 a -9 kcal/mol (Vina); comparaci√≥n con inhibidores conocidos.
- **Validaci√≥n**: ROC-AUC >0.8; enrichment factor >10 para actives vs. decoys.
- **Interacciones**: H-bonds con residuos clave (e.g., Asp350, His34 en ACE2).
- **Gr√°ficos**: Scatter plots (scores Vina vs. GNINA), visualizaciones 3D.

## üìú Licencia

Este proyecto est√° bajo la **[Licencia MIT](LICENSE)**, permitiendo uso, modificaci√≥n y distribuci√≥n para fines acad√©micos y de investigaci√≥n no comercial.

## üôå Contribuciones

¬°Bienvenidas las contribuciones! Por favor, revisa [CONTRIBUTING.md](docs/CONTRIBUTING.md) para directrices. Abre un issue o pull request para mejoras (e.g., scripts adicionales, optimizaci√≥n GPU).

## üìß Contacto

- **Autor**: Vlad Salazar ([vosalazar26@outlook.com](mailto:vosalazar26@outlook.com))
- **Issues**: Reporta bugs o sugerencias en [GitHub Issues](https://github.com/VladSalazar01/Docking_ACE2_remdesivir_Unir/issues)
- **Colaboraci√≥n**: Contacta para extensiones (e.g., MD con GROMACS) o publicaciones.

## üåü Agradecimientos

- Equipo de AutoDock Vina, RDKit, MOPAC, y DUDE-Z por herramientas open-source.
- Comunidad de bioinform√°tica por recursos como ChEMBL y ZINC.
- UNIR por soporte acad√©mico.
